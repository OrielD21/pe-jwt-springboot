# Details for the Data Source
spring.datasource.url = jdbc:postgresql://localhost:5432/login_system
spring.datasource.username = postgres
spring.datasource.password = root

# Hibernate Properties
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto = update
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.format_sql=true

# Jwt
app.jwt-secret=daf66e01593f61a15b857cf433aae03a005812b31234e149036bcc8dee755dbb
app.jwt-expiration-milliseconds=604800000


# ** spring.datasource.url: Esta propiedad especifica la URL de conexión JDBC a la base de datos PostgreSQL.
# En este caso, la base de datos se encuentra en localhost en el puerto 5432 y se llama login_system.

# ** spring.datasource.username y spring.datasource.password: Estas propiedades especifican el nombre de usuario y la contraseña
# utilizados para conectarse a la base de datos PostgreSQL. En este caso, el nombre de usuario es "postgres" y la contraseña es
# "root".

# ** spring.jpa.properties.hibernate.dialect: Esta propiedad define el dialecto de Hibernate que se utilizará. En este caso,
# se utiliza el dialecto específico de PostgreSQL.

# ** spring.jpa.hibernate.ddl-auto: Esta propiedad determina cómo Hibernate manejará la creación y actualización del esquema
# de la base de datos. En este caso, está configurado en "update", lo que significa que Hibernate actualizará automáticamente
# el esquema de la base de datos según las entidades definidas en la aplicación.

    # -- validate: Esta opción le indica a Hibernate que solo valide el esquema de la base de datos, pero no lo modifique.
    # Si el esquema no coincide con las entidades definidas en la aplicación, se lanzará una excepción.

    # -- create: Esta opción le indica a Hibernate que cree el esquema de la base de datos desde cero en cada inicio de la
    # aplicación. Esto significa que eliminará y volverá a crear todas las tablas en la base de datos, lo que puede resultar
    # en la pérdida de datos.

    # -- create-drop: Similar a create, esta opción crea el esquema de la base de datos desde cero en cada inicio de la
    # aplicación, pero también lo eliminará cuando la aplicación se cierre de forma ordenada. Esta opción es útil para
    # desarrollo y pruebas, pero no se recomienda para entornos de producción debido a la pérdida de datos.

    # -- none: Esta opción le indica a Hibernate que no realice ninguna operación en el esquema de la base de datos.
    # Es responsabilidad del usuario asegurarse de que el esquema de la base de datos coincida con las entidades definidas
    # en la aplicación.

# ** spring.jpa.show-sql: Esta propiedad determina si se deben mostrar las consultas SQL generadas por
# Hibernate en la consola. Aquí está configurado como "false", lo que significa que no se mostrarán las consultas SQL.

# ** spring.jpa.properties.hibernate.format_sql: Esta propiedad indica si las consultas SQL deben formatearse para que sean más
# legibles. Está configurado como "true", lo que significa que las consultas SQL estarán formateadas para una mejor legibilidad.

# ** app.jwt-secret: Esta propiedad especifica la clave secreta utilizada para firmar y verificar los tokens JWT.
# Es importante mantener esta clave segura y no compartirla públicamente.

# ** app.jwt-expiration-milliseconds: Esta propiedad define el tiempo de expiración de los tokens JWT en milisegundos.
# En este caso, está configurado en 604800000 milisegundos, lo que corresponde a una semana.